// Generated by gencpp from file lifelong_backend/SetCommandRequest.msg
// DO NOT EDIT!


#ifndef LIFELONG_BACKEND_MESSAGE_SETCOMMANDREQUEST_H
#define LIFELONG_BACKEND_MESSAGE_SETCOMMANDREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace lifelong_backend
{
template <class ContainerAllocator>
struct SetCommandRequest_
{
  typedef SetCommandRequest_<ContainerAllocator> Type;

  SetCommandRequest_()
    : type(0)
    , cmd(0)  {
    }
  SetCommandRequest_(const ContainerAllocator& _alloc)
    : type(0)
    , cmd(0)  {
  (void)_alloc;
    }



   typedef uint16_t _type_type;
  _type_type type;

   typedef uint16_t _cmd_type;
  _cmd_type cmd;





  typedef boost::shared_ptr< ::lifelong_backend::SetCommandRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lifelong_backend::SetCommandRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetCommandRequest_

typedef ::lifelong_backend::SetCommandRequest_<std::allocator<void> > SetCommandRequest;

typedef boost::shared_ptr< ::lifelong_backend::SetCommandRequest > SetCommandRequestPtr;
typedef boost::shared_ptr< ::lifelong_backend::SetCommandRequest const> SetCommandRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lifelong_backend::SetCommandRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lifelong_backend::SetCommandRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::lifelong_backend::SetCommandRequest_<ContainerAllocator1> & lhs, const ::lifelong_backend::SetCommandRequest_<ContainerAllocator2> & rhs)
{
  return lhs.type == rhs.type &&
    lhs.cmd == rhs.cmd;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::lifelong_backend::SetCommandRequest_<ContainerAllocator1> & lhs, const ::lifelong_backend::SetCommandRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace lifelong_backend

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::lifelong_backend::SetCommandRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lifelong_backend::SetCommandRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lifelong_backend::SetCommandRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lifelong_backend::SetCommandRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lifelong_backend::SetCommandRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lifelong_backend::SetCommandRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lifelong_backend::SetCommandRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "48921078446023e7fe3c6ecb4b286b1f";
  }

  static const char* value(const ::lifelong_backend::SetCommandRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x48921078446023e7ULL;
  static const uint64_t static_value2 = 0xfe3c6ecb4b286b1fULL;
};

template<class ContainerAllocator>
struct DataType< ::lifelong_backend::SetCommandRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lifelong_backend/SetCommandRequest";
  }

  static const char* value(const ::lifelong_backend::SetCommandRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lifelong_backend::SetCommandRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16 type\n"
"uint16 cmd\n"
;
  }

  static const char* value(const ::lifelong_backend::SetCommandRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lifelong_backend::SetCommandRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
      stream.next(m.cmd);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetCommandRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lifelong_backend::SetCommandRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lifelong_backend::SetCommandRequest_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.type);
    s << indent << "cmd: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.cmd);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LIFELONG_BACKEND_MESSAGE_SETCOMMANDREQUEST_H
